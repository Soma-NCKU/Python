
# defination function_name(parameter):
def multiply():
    result = 10.5 * 4
    return result


answer = multiply()
print(answer)


def multiple(x, y):
    result = x * y
    return result


ans = multiple(10.5, 4)
print(ans)

print()

for val in range(1, 11):
    two_table = multiple(2, val)
    print(" 2 multplied with {} equals {}".format(val, two_table))

# ------------------------------------------------------------------------
# Palindromes

def is_palindrome(string):
    backwards = string[::-1]  # reverse the given string
    return backwards.casefold() == string.casefold()     # true

# (or)

def is_Palindrome(string):
    return string[::-1] == string


word = input("Please enter a word to check: ")
if is_palindrome(word):
    print(" '{}' is a palindrome".format(word))
else:
    print(" '{}' is not a palindrome".format(word))
    
# ----------------------------------------------------------------
# Mini- Challenges
# Create a palindrome_sentence function. 
# The function should return True if the sentence is a palindrome - False, otherwise.

# sentence to be checked:
# 1. Was it a car, or a cat, I saw?
# 2. Do geese see god?
# 3. Desnes not far, Rafton sensed.

# Hint: remeber that we ignore spaces, punctuation and things like tabs and line feeds. 
# We are interested in alphanumeric characters. Check oiut the String Methods, 
# find out that's suitable for identifying if a charcater if a character is alphanumeric.

def palindrome_sentence(sentence):
    string = ""
    for char in sentence:
        if char.isalnum():
            string += char
    print(string)
    return string.casefold() == string[::-1].casefold()


word = input("Please enter a word to check: ")
if palindrome_sentence(word):
    print(" '{}' is a palindrome".format(word))
else:
    print(" '{}' is not a palindrome".format(word))
