# Without formatting
for i in range(1, 13):
    print("No. {0} squared is {1} and cubed is {2}".format(i, i**2, i**3))

print()

# With formatting

# default it is right aligned
for i in range(1, 13):
    print("No. {0:2} squared is {1:4} and cubed is {2:4}".format(i, i**2, i**3))
    # {0:2} - {index:reserves places on the screen}

print()

# left aligned
for i in range(1, 13):
    print("No. {0:<2} squared is {1:<4} and cubed is {2:<4}".format(i, i**2, i**3))
    # {0:2} - {index:reserves places on the screen}

print()

# center aligned
for i in range(1, 13):
    print("No. {0:^2} squared is {1:^4} and cubed is {2:^4}".format(i, i**2, i**3))
    
# Python 3.6 has introduced another way of formatting using f-strings
age = 2
#print("Soma is " + age + ' ' + "old")  # TypeError: can only concatenate str (not "int") to str
print("Soma is " + str(age) + " years old")

# or another way is
print(f"Soma is {age} years old ")


# Python 2 String Interpolation - this will work only in Python 2

age = 24
print("My age is %d years" % age)

major = "years"
minor = "months"
print("My age is %d %s, %d %s" (age, major, 6, minor))
print("PI is approximately %f" %(22/7))


# Mini Challenge
# Given a string
data = "1:A, 2:B, 3:C, 4:D, 5:E, 6:F, 7:G, 8:H"
print(data)

# we want to slice the string to extract just the digits.
# which of these slices will "NOT" do what we want?

print(data[::5])   # every 5 position digit is displayed
print(data[1:5])   # display digit from 1-4
print(data[0:-1:5]) # every 5 position digit is displayed but using -ve indexing
print(data[:-1:5]) # same as previous example
