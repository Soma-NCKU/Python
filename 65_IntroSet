
# Observe the output 
farm_animals = {'cow', 'sheep', 'hen', 'goat', 'horse'}
print(farm_animals)

# Tool -> Python console (setting to float)
set(range(0,20,2))
set(range(1,20,2))

# Test membership
# Why it is faster than dictionary - hash code to store keys

numbers = {}
print(numbers, type(numbers))

# If you want to create a set
numbers = {*""}
print(numbers, type(numbers))

numbers = {*{}}
print(numbers, type(numbers))

numbers = set()
print(numbers, type(numbers))

numbers.add(1)
print(numbers)

# Using set to remove duplicate values
# Observe the output, what whens when you try to enter duplicate data
while len(numbers) < 4:
    next_value = int(input("Please enter your next value: "))
    numbers.add(next_value)
print(numbers)

print()

# Using list
data = ["blue", "red", "blue", "green", "red", "blue", "white"]

# create a set from the list , to remove duplicates.
unique_data = set(data)
#unique_data = sorted(set(data))  # sorted() method will create a list and the order is maintained
print(unique_data)

# if you want to preseve the order the data was entered ..
# easy method is keys() method - they are also unique and the order is preserved
unique_data = list(dict.fromkeys(data))
print(unique_data)

print("*" * 80)
# Removing an items from a set:-

small_ints = set(range(21))
print(small_ints)

print(small_ints.clear())

print()
small_ints = set(range(21))
print(small_ints)

print(small_ints.discard(10))
print(small_ints.remove(11))
print(small_ints)

# Observe the output -
print(small_ints.discard(99)) 
print(small_ints.remove(99))
