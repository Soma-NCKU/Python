data = [
    ("orange", "a sweet, orange, citrus fruit "),
    ("apple", "good for making cider"),
    ("lemon", "a sour, yellow citrus fruit"),
    ("grape", " a small, sweet fruit growing in bunches"),
    ("melon", "sweet and juicy")
]

# If we wish to create an integer value from these string, we need a way to get an integer
# from each letter. In Python, the function that can do this is - the ord function.
# In present situation we use unicode instead of ASCII

print(ord("a"))
print(ord("b"))
print(ord("z"))
print()

def simple_hash(s: str) -> int:
    """ A simple hasting function"""
    basic_hash = ord(s[0])
    return basic_hash % 10

# Observe the difference in  the output of
# hash value printed using simple_hash function and python hash function
for key, value in data:
    h = simple_hash(key)
    print(key, h)

print()

for key, value in data:
    h = hash(key)       # Python hash function
    print(key, h)

# Another way efficient way

keys = [""] * 10
values = keys.copy()

for key, value in data:
    h = simple_hash(key)
    print(key, h)
    keys[h] = key
    values[h] = value

print(keys)
print(values)
print()

def get(k: str) -> str:
    """Return the value for a key, or None if they key doesn't exist"""
    hash_code = simple_hash(k)
    if values[hash_code]:
        return values[hash_code]
    else:
        return None


value = get("lemon")
print(value)
value = get("Tomato")
print(value)
# Observe the output
value = get("banana")
print(value)
